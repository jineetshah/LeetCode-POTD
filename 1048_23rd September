class Solution {
public:
    bool isPredecessor(string n, string p){
        int a = 0;
        if(n.length()==p.length()+1){
            int k = 0;

            for(int i =0;i<n.length();i++){
                if(p[k]==n[i]){
                    k++;
                }
                else{
                    a++;
                }
            }
            if(a==1){
                return true;
            }

        }
        return false;
        
    }
    static bool compareByLength(const std::string &a, const std::string &b)
    {
    return a.length() < b.length();
    }
    int longestStrChain(vector<string>& words) {
        sort(words.begin(),words.end(), compareByLength);

        vector<int> dp(words.size(),1);

        int ans = 1;

        for(int i = 0;i<words.size();i++){

            for(int j = 0;j<i;j++){
                if(isPredecessor(words[i],words[j]) && dp[j]+1>dp[i]){
                    dp[i] = dp[j]+1;
                }
            }
            if (dp[i]>ans){
                ans = dp[i];
            }
        }
        return ans;
        
    }
};
