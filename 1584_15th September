class Solution {

public:
    
    int minCostConnectPoints(vector<vector<int>>& points) {
        int ans = 0;
        int k = 0;
        vector<int> p;
        vector<pair<int,pair<int,int>>> e;
         for(int i =0;i<points.size();i++){
             p.push_back(i);
         }
         int c =0;
        for(int i =0;i<points.size();i++){
            for(int j =i+1;j<points.size();j++){
                c = abs(points[i][0]- points[j][0])+ abs(points[i][1]- points[j][1]);
                e.push_back({c,{i,j}});
            }
        }
        sort(e.begin(),e.end());

        for(auto &e1 : e){
            int c1 = e1.first;
            int a = e1.second.first;
            int b = e1.second.second;

            if(find_p(p,a)!=find_p(p,b)){
                u(p,a,b);
                ans+=c1;
                k++;
            }
            if(k == points.size()-1){
                break;
            }

        }
        return ans;
    }
    private:
    int find_p(vector<int> p, int a){
        if(p[a]==a){
            return a;
        }
        p[a]= find_p(p,p[a]);
        return p[a];
    }
    void u(vector<int> &p, int a, int b){
        p[find_p(p,a)] = find_p(p,b);
    }
};

